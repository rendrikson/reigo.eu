<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reigo.eu</title>
    <link>/</link>
    <description>Recent content on reigo.eu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 15 Aug 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Estonian Parliament Session Attendance</title>
      <link>/2018/08/estonian-parliament-session-attendance/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/08/estonian-parliament-session-attendance/</guid>
      <description>&lt;p&gt;Description of the Parliament of Estonia from its &lt;a href=&#34;https://www.riigikogu.ee/en/&#34;&gt;website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Riigikogu is the parliament of Estonia. Its 101 members are elected at general elections for a term of four years. The Riigikogu passes laws and resolutions, exercises parliamentary supervision and ratifies international agreements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Parliament of Estonia has regular meetings. In this post we look how to get session attendance data from &lt;a href=&#34;https://aavik.riigikogu.ee/&#34;&gt;Estonian Government Office API&lt;/a&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and visualize XIII Riigikogu absence from these sessions. &lt;a href=&#34;https://en.wikipedia.org/wiki/R_(programming_language)&#34;&gt;R&lt;/a&gt; will be used to get and analyze data.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Special thanks to Estonian Government Office eployees who answered my queries and showed me how to access the data I was interested in. Double thanks for reacting so quickly to fix a problem I was having!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you are not interested getting into the R stuff, feel free to jump to &lt;a href=&#34;#results&#34;&gt;results&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Data&lt;/h1&gt;
&lt;p&gt;We use &lt;code&gt;jsonlite&lt;/code&gt; package to download parliament votings data. Required fields to access votings data are &lt;code&gt;startDate&lt;/code&gt; and &lt;code&gt;endDate&lt;/code&gt; (see &lt;a href=&#34;https://aavik.riigikogu.ee/swagger-ui.html#/H%C3%A4%C3%A4letused/getVotingsUsingGET&#34;&gt;/api/votings&lt;/a&gt;). Session attendance votings are marked as type &lt;code&gt;Kohaloleku kontroll&lt;/code&gt; (attendance control). Lets download all votings between &lt;code&gt;1990-01-01&lt;/code&gt; and &lt;code&gt;2018-09-01&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(jsonlite)
url &amp;lt;- &amp;quot;https://aavik.riigikogu.ee/api/votings?startDate=1990-01-01&amp;amp;endDate=2018-09-01&amp;amp;lang=et&amp;quot;
votings &amp;lt;- fromJSON(url) %&amp;gt;% as_data_frame() 
head(votings)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 5
##   uuid           title             membership sittingDateTime  votings    
##   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;                  &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;list&amp;gt;     
## 1 04be4e82-f266… Täiskogu korrali…          8 1998-01-22T00:0… &amp;lt;data.fram…
## 2 6176a8ae-89ac… Täiskogu korrali…          8 1998-01-29T00:0… &amp;lt;data.fram…
## 3 bcb34b03-a842… Täiskogu korrali…          8 1998-02-09T00:0… &amp;lt;data.fram…
## 4 cd42db50-d8b7… Täiskogu korrali…          8 1998-02-11T00:0… &amp;lt;data.fram…
## 5 e289a577-8c64… Täiskogu korrali…          8 1998-02-18T00:0… &amp;lt;data.fram…
## 6 1ea1246f-056f… Täiskogu korrali…          8 1998-02-25T00:0… &amp;lt;data.fram…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voting type information lies in &lt;code&gt;votings&lt;/code&gt; list-column. Using &lt;code&gt;str()&lt;/code&gt; we see that votings &lt;code&gt;data.frame&lt;/code&gt; also as some list-columns. Since these list-columns are not necessary for us, lets remove them to have nice &lt;code&gt;data.frame&lt;/code&gt; structure.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(votings$votings[[1]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    1 obs. of  15 variables:
##  $ uuid           : chr &amp;quot;c80bec7e-58cb-347e-ba2b-6511cf1b9b8d&amp;quot;
##  $ votingNumber   : int 1
##  $ type           :&amp;#39;data.frame&amp;#39;: 1 obs. of  2 variables:
##   ..$ code : chr &amp;quot;AVALIK&amp;quot;
##   ..$ value: chr &amp;quot;Avalik&amp;quot;
##  $ description    : logi NA
##  $ startDateTime  : chr &amp;quot;1998-01-22T10:42:00&amp;quot;
##  $ endDateTime    : logi NA
##  $ present        : int 75
##  $ absent         : int 26
##  $ inFavor        : int 66
##  $ against        : int 3
##  $ neutral        : int 6
##  $ abstained      : int 26
##  $ relatedDraft   : logi NA
##  $ relatedDocument: logi NA
##  $ _links         :&amp;#39;data.frame&amp;#39;: 1 obs. of  1 variable:
##   ..$ self:&amp;#39;data.frame&amp;#39;: 1 obs. of  1 variable:
##   .. ..$ href: chr &amp;quot;http://aavik.riigikogu.ee/api/votings/c80bec7e-58cb-347e-ba2b-6511cf1b9b8d&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;votings &amp;lt;- votings %&amp;gt;%
  mutate(votings = map(votings, function(x) {
    x[, map_chr(x, typeof) != &amp;quot;list&amp;quot;]
  })) %&amp;gt;%
  unnest(votings)
head(votings)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 17
##   uuid  title membership sittingDateTime uuid1 votingNumber description
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;        &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;      
## 1 04be… Täis…          8 1998-01-22T00:… c80b…            1 &amp;lt;NA&amp;gt;       
## 2 6176… Täis…          8 1998-01-29T00:… 43cc…            3 1. parandus
## 3 6176… Täis…          8 1998-01-29T00:… 2b57…            2 660        
## 4 6176… Täis…          8 1998-01-29T00:… d729…            4 2. parandus
## 5 6176… Täis…          8 1998-01-29T00:… fb1e…            1 1. parandus
## 6 bcb3… Täis…          8 1998-02-09T00:… 2136…            1 Päevakorra…
## # ... with 10 more variables: startDateTime &amp;lt;chr&amp;gt;, endDateTime &amp;lt;chr&amp;gt;,
## #   present &amp;lt;int&amp;gt;, absent &amp;lt;int&amp;gt;, inFavor &amp;lt;int&amp;gt;, against &amp;lt;int&amp;gt;,
## #   neutral &amp;lt;int&amp;gt;, abstained &amp;lt;int&amp;gt;, relatedDraft &amp;lt;lgl&amp;gt;,
## #   relatedDocument &amp;lt;lgl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voting type information is in column &lt;code&gt;description&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;votings %&amp;gt;% 
  count(description) %&amp;gt;% 
  arrange(-n) %&amp;gt;% 
  head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##   description                   n
##   &amp;lt;chr&amp;gt;                     &amp;lt;int&amp;gt;
## 1 Lõpphääletus               3245
## 2 Kohaloleku kontroll        3150
## 3 Päevakorra kinnitamine      573
## 4 Lükata tagasi               427
## 5 Läbirääkimiste lôpetamine   376
## 6 1. parandus                 355&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For getting detailed votings information we use &lt;code&gt;get_votings()&lt;/code&gt; function. In process of getting detailed votings information we also save all votings data so that we can easily use it later.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_voting &amp;lt;- function(uuid = NULL) {
  
  # uuid: voting id
  # one voting is saved once
  # expects to have data/voting-details folder in your working directory
  
  files &amp;lt;- dir(&amp;quot;data/voting-details/&amp;quot;) # detailed votings local directory
  if (paste0(uuid, &amp;quot;.rds&amp;quot;) %in% files) 
    y &amp;lt;- readRDS(paste0(&amp;quot;data/voting-details/&amp;quot;, uuid, &amp;quot;.rds&amp;quot;))
  else {
    url &amp;lt;- glue::glue(&amp;quot;https://aavik.riigikogu.ee/api/votings/{uuid}?lang=et&amp;quot;)
    Sys.sleep(5) + runif(1, max = 2)
    y &amp;lt;- tryCatch({
      x &amp;lt;- jsonlite::fromJSON(url)
      x
    }, error = function(y) NULL)
    if (!is.null(y)) saveRDS(y, paste0(&amp;quot;data/voting-details/&amp;quot;, uuid, &amp;quot;.rds&amp;quot;))
    else print(y) 
  }
  y
}

ids &amp;lt;- votings$uuid1[votings$description == &amp;quot;Kohaloleku kontroll&amp;quot;]
map(ids, get_voting)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After getting and saving all necessary attendance check data, we use &lt;code&gt;var_faction()&lt;/code&gt; and &lt;code&gt;var_decision()&lt;/code&gt; functions and some mutating to make &lt;code&gt;attendance&lt;/code&gt; data more accessible:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;var_faction &amp;lt;- function(x) {
  faction &amp;lt;- x$faction$name
  x$faction &amp;lt;- faction
  x
}

var_decision &amp;lt;- function(x) {
  decision &amp;lt;- x$decision$value
  x$decision &amp;lt;- decision
  x
}

files &amp;lt;- dir(&amp;quot;data/voting-details/&amp;quot;, full.names = T)
attendance &amp;lt;- map_df(files, function(f) {
  x &amp;lt;- readRDS(f)
  x$voters %&amp;gt;% select(-`_links`, -lastName, -firstName) %&amp;gt;%
    var_faction() %&amp;gt;%
    var_decision() %&amp;gt;% as_data_frame() %&amp;gt;%
    mutate(
      votingNumber = x$votingNumber,
      startDatetime = lubridate::as_datetime(x$startDateTime)
    )
}) %&amp;gt;%
  left_join(votings %&amp;gt;% select(uuid = uuid1, description), by = &amp;quot;uuid&amp;quot;) %&amp;gt;%
  filter(description == &amp;quot;Kohaloleku kontroll&amp;quot;)

head(attendance)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 6
##   fullName   active faction      decision votingNumber startDatetime      
##   &amp;lt;chr&amp;gt;      &amp;lt;lgl&amp;gt;  &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;           &amp;lt;int&amp;gt; &amp;lt;dttm&amp;gt;             
## 1 Rein Aidma FALSE  Eesti Refor… kohal            6518 2007-05-16 14:05:51
## 2 Jaak Aab   FALSE  &amp;lt;NA&amp;gt;         kohal            6518 2007-05-16 14:05:51
## 3 Peep Aru   TRUE   Eesti Refor… kohal            6518 2007-05-16 14:05:51
## 4 Hannes As… FALSE  &amp;lt;NA&amp;gt;         kohal            6518 2007-05-16 14:05:51
## 5 Meelis At… FALSE  &amp;lt;NA&amp;gt;         kohal            6518 2007-05-16 14:05:51
## 6 Ivi Eenmaa FALSE  &amp;lt;NA&amp;gt;         kohal            6518 2007-05-16 14:05:51&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By now we have all necessary data. Decision values &lt;code&gt;kohal&lt;/code&gt; and &lt;code&gt;poolt&lt;/code&gt; mean that parliament member attended meeting. &lt;code&gt;puudub&lt;/code&gt; means that member did not attend the meeting.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;helpers&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Helpers&lt;/h1&gt;
&lt;p&gt;We use following helper functions to make data munging and plotting easier:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat_attendace_roll_mean &amp;lt;- function(x = NULL, n = 1, from = &amp;quot;1970-01-01&amp;quot;, 
                                    to = Sys.Date()) {
  
  # member has to be present (attend) at least in 1 attendence check to be 
  # counted as present for the day
  # 
  # x: attendance data
  # n: nr of attendance check over mean is calculated
  
  from &amp;lt;- as.Date(from)
  to &amp;lt;- as.Date(to)
  
  x %&amp;gt;% 
    mutate(date = lubridate::date(startDatetime)) %&amp;gt;% 
    filter(date &amp;gt;= from &amp;amp; date &amp;lt;= to) %&amp;gt;%
    count(date, fullName, decision) %&amp;gt;%
    group_by(date) %&amp;gt;%
    summarise(
      n_present = sum(decision %in% c(&amp;quot;kohal&amp;quot;, &amp;quot;poolt&amp;quot;)),
      n_total = n_distinct(fullName)
    ) %&amp;gt;% ungroup() %&amp;gt;% 
    mutate(p_present = n_present / n_total) %&amp;gt;% 
    mutate(
      p_roll_mean = RcppRoll::roll_sumr(n_present, n = n, na.rm = T) / 
        RcppRoll::roll_sumr(n_total, n = n, na.rm = T)
    ) %&amp;gt;% ungroup() 
}

plot_attendance_roll_mean &amp;lt;- function(x = NULL, n = 1, from = &amp;quot;1970-01-01&amp;quot;, 
                                      to = Sys.Date()) {
  
  # plotting function for making results part easier to read
  # 
  # x: attendance data
  # n: nr of attendance check over mean is calculated
 
  gg_data1 &amp;lt;- dat_attendace_roll_mean(x = x, n = n, from = from, to = to)
  # first and last point
  first &amp;lt;- gg_data1 %&amp;gt;% filter(!is.na(p_roll_mean)) %&amp;gt;% filter(date == min(date))
  last  &amp;lt;- gg_data1 %&amp;gt;% filter(!is.na(p_roll_mean)) %&amp;gt;% filter(date == max(date))

  
  gg_data1 %&amp;gt;% 
    ggplot(aes(date, 1 - p_roll_mean)) + 
    geom_line() +
    geom_point(data = first, color = &amp;quot;white&amp;quot;, size = 2) + 
    geom_point(data = last, color = &amp;quot;white&amp;quot;, size = 2) + 
    hrbrthemes::theme_modern_rc(grid = &amp;quot;Y&amp;quot;, plot_title_size = 14,
                            subtitle_size = 11, 
                            plot_margin = ggplot2::margin(30, 30, 10, 30)) +
    scale_y_continuous(labels = function(x) scales::percent(x, 1), 
                       limits = c(.12, .22), 
                       breaks = seq(.12, .24, .03)) +
    labs(x = NULL, y = NULL, 
         title = &amp;quot;Absence from XIII Riigikogu sessions has increased&amp;quot;,
         subtitle = glue::glue(&amp;quot;{n} meeting days rolling average absence&amp;quot;),
         caption = &amp;quot;\nSource: https://aavik.riigikogu.ee/api/votings/ \n \nTheme: modern_rc from {hrbrthemes}&amp;quot;) +
    scale_color_manual(values = col_faction()) + 
    theme(
      legend.title = element_blank(),
      text = element_text(family = &amp;quot;Helvetica&amp;quot;)
    ) + 
    geom_vline(xintercept = as.Date(c(&amp;quot;2015-03-30&amp;quot;, &amp;quot;2016-11-23&amp;quot;, &amp;quot;2017-09-10&amp;quot;)), 
               lty = 2, alpha = .5, color = &amp;quot;#8e8e93&amp;quot;) + 
    annotate(&amp;quot;text&amp;quot;, label = &amp;quot;new government\ntook the oath&amp;quot;, 
                  x = as.Date(&amp;quot;2016-11-23&amp;quot;) - 20, y = .195, size = 3, hjust = 1) + 
    annotate(&amp;quot;text&amp;quot;, label = &amp;quot;end of 2017 \nsummer break&amp;quot;, 
                  x = as.Date(&amp;quot;2017-09-10&amp;quot;) + 20, y = .135, size = 3, hjust = 0) + 
    annotate(&amp;quot;text&amp;quot;, label = &amp;quot;2015-03-30 \nXIII Riigikogu \nfirst session&amp;quot;, 
                  x = as.Date(&amp;quot;2015-03-30&amp;quot;) + 20, y = .165, size = 3, hjust = 0) + 
    annotate(&amp;quot;text&amp;quot;, label = scales::percent(1 - first$p_roll_mean),
             x = first$date - 70, y = .134, size = 3.5, color = &amp;quot;white&amp;quot;) + 
    annotate(&amp;quot;text&amp;quot;, label = scales::percent(1 - last$p_roll_mean),
             x = last$date + 70, y = .215, size = 3.5, color = &amp;quot;white&amp;quot;) + 
    scale_x_date(limits = as.Date(c(&amp;quot;2015-01-01&amp;quot;, &amp;quot;2018-10-01&amp;quot;)))
     
}  &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;results&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Results&lt;/h1&gt;
&lt;p&gt;Reading forward, keep in mind that &lt;strong&gt;the attendance check information only shows who were present or absent at the moment of attendance check and not during the whole day of the sitting.&lt;/strong&gt; In the following, member is considered absent, if (s)he has missed all attendance checks of the day.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Estonian_parliamentary_election,_2015&#34;&gt;XIII Riigikogu&lt;/a&gt; election was held in 1. March 2015. First XIII Riigikogu session took place in 30. March 2015. Six factions gained enough votes to get seats in Riigikogu. Following plot gives a glimpse of XIII Riigikogu sessions absence/attendance.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;plot_attendance_roll_mean(x = attendance, n = 90, from = &amp;quot;2015-03-30&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-08-15-estonian-parliament-session-attendance_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes: &lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Member is considered absent for a day, if (s)he has missed all attendance checks of the day.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;90 meeting days rolling average absence is calculated by summing all absences from those 90 days (e.g, day one - 15 members were absent, day two - 8 members were absent) divided by total votes (since Estonian parliament has 101 members, it would be 90 x 101).&lt;/li&gt;
&lt;li&gt;XIII Riigikogu 90th meeting day was &lt;code&gt;2016-01-21&lt;/code&gt; which makes it the first day the 90 days rolling average is calculated. As of writing, last data point is from &lt;code&gt;2018-06-14&lt;/code&gt;.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/J%C3%BCri_Ratas%27_cabinet&#34;&gt;&lt;code&gt;2016-11-23&lt;/code&gt; Jüri Ratas’ cabinet took the oath&lt;/a&gt;. It was preceded by the Second Cabinet of Taavi Rõivas (from 9 April 2015 – 22 November 2016 &lt;a href=&#34;#fn2&#34; class=&#34;footnoteRef&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;), a cabinet that ended when Social Democrats and the Union of Pro Patria and Res Publica joined the opposition’s no confidence vote against the cabinet. &lt;a href=&#34;#fn3&#34; class=&#34;footnoteRef&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;fin&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;FIN&lt;/h1&gt;
&lt;p&gt;In this post we saw how to download Estonian parliament session attendance data using &lt;a href=&#34;https://aavik.riigikogu.ee/&#34;&gt;Government Office API&lt;/a&gt;. One can use same methodology to get other votings data. There is obviously many (and more) interesting topics one can look into using data from the API. Since this post main focus was getting first feeling of the API and data, we leave further analysis for another posts.&lt;/p&gt;
&lt;p&gt;If you happen to use the API or have any question, please leave a comment. I am curious of your take on the data! :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;As of writing this post the API is in demo/test phase.&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Government_of_Estonia&#34; class=&#34;uri&#34;&gt;https://en.wikipedia.org/wiki/Government_of_Estonia&lt;/a&gt;&lt;a href=&#34;#fnref2&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/J%C3%BCri_Ratas%27_cabinet&#34;&gt;https://en.wikipedia.org/wiki/J%C3%BCri_Ratas%27_cabinet&lt;/a&gt;&lt;a href=&#34;#fnref3&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Extending DT child rows example</title>
      <link>/2018/04/extending-dt-child-row-example/</link>
      <pubDate>Fri, 13 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/extending-dt-child-row-example/</guid>
      <description>&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/datatables-css/datatables-crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/datatables-binding/datatables.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/dt-core/css/jquery.dataTables.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;/rmarkdown-libs/dt-core/css/jquery.dataTables.extra.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/dt-core/js/jquery.dataTables.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Short description of R package &lt;code&gt;DT&lt;/code&gt; from its &lt;a href=&#34;https://rstudio.github.io/DT/&#34;&gt;website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The R package DT provides an R interface to the JavaScript library &lt;a href=&#34;(https://datatables.net/)&#34;&gt;DataTables&lt;/a&gt;. R data objects (matrices or data frames) can be displayed as tables on HTML pages, and DataTables provides filtering, pagination, sorting, and many other features in the tables.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In practice it means that we can easily publish interactable HTML tables to our reports, dashboards, blog posts etc. To learn more about &lt;code&gt;DT&lt;/code&gt; visit &lt;a href=&#34;https://rstudio.github.io/DT/&#34; class=&#34;uri&#34;&gt;https://rstudio.github.io/DT/&lt;/a&gt;. As you can imagine, there is lot of stuff you can do with your &lt;code&gt;datatable&lt;/code&gt;, so even if you have used &lt;code&gt;datatable()&lt;/code&gt; function for a while, &lt;strong&gt;I’ll highly recommend to take a look to the &lt;a href=&#34;https://rstudio.github.io/DT/&#34;&gt;DT website&lt;/a&gt;&lt;/strong&gt;. I found it to be full of useful examples.&lt;/p&gt;
&lt;div id=&#34;child-rows&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Child Rows&lt;/h1&gt;
&lt;p&gt;There is &lt;a href=&#34;https://rstudio.github.io/DT/002-rowdetails.html&#34;&gt;an example&lt;/a&gt; of &lt;code&gt;datatable&lt;/code&gt; with child rows published in &lt;code&gt;DT&lt;/code&gt; website. The example, in turn, is adapted from DataTables &lt;a href=&#34;https://datatables.net/examples/api/row_details.html&#34;&gt;website&lt;/a&gt;. In this post I will extend &lt;code&gt;DT&lt;/code&gt; &lt;a href=&#34;https://rstudio.github.io/DT/002-rowdetails.html&#34;&gt;child rows example&lt;/a&gt; such that it will look more similar to the original. I start by downloading example data from &lt;a href=&#34;https://datatables.net/extensions/buttons/examples/initialisation/export.html&#34;&gt;DataTables&lt;/a&gt; website and save it as &lt;code&gt;dt-export-ex.csv&lt;/code&gt;. Next I will load necessary packages, read data to R and add &lt;code&gt;Employee ID&lt;/code&gt; variable to data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(DT)
x &amp;lt;- readr::read_csv(&amp;quot;dt-export-ex.csv&amp;quot;)
x[[&amp;quot;Employee ID&amp;quot;]] &amp;lt;- round(runif(nrow(x)) * 10000)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I use &lt;a href=&#34;#datatable2&#34;&gt;&lt;code&gt;datatable2()&lt;/code&gt;&lt;/a&gt; function (see full code &lt;a href=&#34;#datatable2&#34;&gt;below&lt;/a&gt;) to embed &lt;code&gt;datatable&lt;/code&gt; with child rows to this document:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;datatable2(
  x = x, 
  vars = c(&amp;quot;Employee ID&amp;quot;, &amp;quot;Age&amp;quot;, &amp;quot;Start date&amp;quot;),
  opts = list(pageLength = 5)
)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:auto;&#34; class=&#34;datatables html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;filter&#34;:&#34;none&#34;,&#34;data&#34;:[[&#34;1&#34;,&#34;2&#34;,&#34;3&#34;,&#34;4&#34;,&#34;5&#34;,&#34;6&#34;,&#34;7&#34;,&#34;8&#34;,&#34;9&#34;,&#34;10&#34;,&#34;11&#34;,&#34;12&#34;,&#34;13&#34;,&#34;14&#34;,&#34;15&#34;,&#34;16&#34;,&#34;17&#34;,&#34;18&#34;,&#34;19&#34;,&#34;20&#34;,&#34;21&#34;,&#34;22&#34;,&#34;23&#34;,&#34;24&#34;,&#34;25&#34;,&#34;26&#34;,&#34;27&#34;,&#34;28&#34;,&#34;29&#34;,&#34;30&#34;,&#34;31&#34;,&#34;32&#34;,&#34;33&#34;,&#34;34&#34;,&#34;35&#34;,&#34;36&#34;,&#34;37&#34;,&#34;38&#34;,&#34;39&#34;,&#34;40&#34;,&#34;41&#34;,&#34;42&#34;,&#34;43&#34;,&#34;44&#34;,&#34;45&#34;,&#34;46&#34;,&#34;47&#34;,&#34;48&#34;,&#34;49&#34;,&#34;50&#34;,&#34;51&#34;,&#34;52&#34;,&#34;53&#34;,&#34;54&#34;,&#34;55&#34;,&#34;56&#34;,&#34;57&#34;],[&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;,&#34;&amp;oplus;&#34;],[&#34;Airi Satou&#34;,&#34;Angelica Ramos&#34;,&#34;Ashton Cox&#34;,&#34;Bradley Greer&#34;,&#34;Brenden Wagner&#34;,&#34;Brielle Williamson&#34;,&#34;Bruno Nash&#34;,&#34;Caesar Vance&#34;,&#34;Cara Stevens&#34;,&#34;Cedric Kelly&#34;,&#34;Charde Marshall&#34;,&#34;Colleen Hurst&#34;,&#34;Dai Rios&#34;,&#34;Donna Snider&#34;,&#34;Doris Wilder&#34;,&#34;Finn Camacho&#34;,&#34;Fiona Green&#34;,&#34;Garrett Winters&#34;,&#34;Gavin Cortez&#34;,&#34;Gavin Joyce&#34;,&#34;Gloria Little&#34;,&#34;Haley Kennedy&#34;,&#34;Hermione Butler&#34;,&#34;Herrod Chandler&#34;,&#34;Hope Fuentes&#34;,&#34;Howard Hatfield&#34;,&#34;Jackson Bradshaw&#34;,&#34;Jena Gaines&#34;,&#34;Jenette Caldwell&#34;,&#34;Jennifer Acosta&#34;,&#34;Jennifer Chang&#34;,&#34;Jonas Alexander&#34;,&#34;Lael Greer&#34;,&#34;Martena Mccray&#34;,&#34;Michael Bruce&#34;,&#34;Michael Silva&#34;,&#34;Michelle House&#34;,&#34;Olivia Liang&#34;,&#34;Paul Byrd&#34;,&#34;Prescott Bartlett&#34;,&#34;Quinn Flynn&#34;,&#34;Rhona Davidson&#34;,&#34;Sakura Yamamoto&#34;,&#34;Serge Baldwin&#34;,&#34;Shad Decker&#34;,&#34;Shou Itou&#34;,&#34;Sonya Frost&#34;,&#34;Suki Burks&#34;,&#34;Tatyana Fitzpatrick&#34;,&#34;Thor Walton&#34;,&#34;Tiger Nixon&#34;,&#34;Timothy Mooney&#34;,&#34;Unity Butler&#34;,&#34;Vivian Harrell&#34;,&#34;Yuri Berry&#34;,&#34;Zenaida Frank&#34;,&#34;Zorita Serrano&#34;],[&#34;Accountant&#34;,&#34;Chief Executive Officer (CEO)&#34;,&#34;Junior Technical Author&#34;,&#34;Software Engineer&#34;,&#34;Software Engineer&#34;,&#34;Integration Specialist&#34;,&#34;Software Engineer&#34;,&#34;Pre-Sales Support&#34;,&#34;Sales Assistant&#34;,&#34;Senior Javascript Developer&#34;,&#34;Regional Director&#34;,&#34;Javascript Developer&#34;,&#34;Personnel Lead&#34;,&#34;Customer Support&#34;,&#34;Sales Assistant&#34;,&#34;Support Engineer&#34;,&#34;Chief Operating Officer (COO)&#34;,&#34;Accountant&#34;,&#34;Team Leader&#34;,&#34;Developer&#34;,&#34;Systems Administrator&#34;,&#34;Senior Marketing Designer&#34;,&#34;Regional Director&#34;,&#34;Sales Assistant&#34;,&#34;Secretary&#34;,&#34;Office Manager&#34;,&#34;Director&#34;,&#34;Office Manager&#34;,&#34;Development Lead&#34;,&#34;Junior Javascript Developer&#34;,&#34;Regional Director&#34;,&#34;Developer&#34;,&#34;Systems Administrator&#34;,&#34;Post-Sales support&#34;,&#34;Javascript Developer&#34;,&#34;Marketing Designer&#34;,&#34;Integration Specialist&#34;,&#34;Support Engineer&#34;,&#34;Chief Financial Officer (CFO)&#34;,&#34;Technical Author&#34;,&#34;Support Lead&#34;,&#34;Integration Specialist&#34;,&#34;Support Engineer&#34;,&#34;Data Coordinator&#34;,&#34;Regional Director&#34;,&#34;Regional Marketing&#34;,&#34;Software Engineer&#34;,&#34;Developer&#34;,&#34;Regional Director&#34;,&#34;Developer&#34;,&#34;System Architect&#34;,&#34;Office Manager&#34;,&#34;Marketing Designer&#34;,&#34;Financial Controller&#34;,&#34;Chief Marketing Officer (CMO)&#34;,&#34;Software Engineer&#34;,&#34;Software Engineer&#34;],[&#34;Tokyo&#34;,&#34;London&#34;,&#34;San Francisco&#34;,&#34;London&#34;,&#34;San Francisco&#34;,&#34;New York&#34;,&#34;London&#34;,&#34;New York&#34;,&#34;New York&#34;,&#34;Edinburgh&#34;,&#34;San Francisco&#34;,&#34;San Francisco&#34;,&#34;Edinburgh&#34;,&#34;New York&#34;,&#34;Sidney&#34;,&#34;San Francisco&#34;,&#34;San Francisco&#34;,&#34;Tokyo&#34;,&#34;San Francisco&#34;,&#34;Edinburgh&#34;,&#34;New York&#34;,&#34;London&#34;,&#34;London&#34;,&#34;San Francisco&#34;,&#34;San Francisco&#34;,&#34;San Francisco&#34;,&#34;New York&#34;,&#34;London&#34;,&#34;New York&#34;,&#34;Edinburgh&#34;,&#34;Singapore&#34;,&#34;San Francisco&#34;,&#34;London&#34;,&#34;Edinburgh&#34;,&#34;Singapore&#34;,&#34;London&#34;,&#34;Sidney&#34;,&#34;Singapore&#34;,&#34;New York&#34;,&#34;London&#34;,&#34;Edinburgh&#34;,&#34;Tokyo&#34;,&#34;Tokyo&#34;,&#34;Singapore&#34;,&#34;Edinburgh&#34;,&#34;Tokyo&#34;,&#34;Edinburgh&#34;,&#34;London&#34;,&#34;London&#34;,&#34;New York&#34;,&#34;Edinburgh&#34;,&#34;London&#34;,&#34;San Francisco&#34;,&#34;San Francisco&#34;,&#34;New York&#34;,&#34;New York&#34;,&#34;San Francisco&#34;],[33,47,66,41,28,61,38,21,46,22,36,39,35,27,23,47,48,63,22,42,59,43,47,59,41,51,65,30,30,43,28,30,21,46,29,66,37,64,64,27,22,55,37,64,51,20,23,53,19,61,61,37,47,62,40,63,56],[&#34;2008-11-28&#34;,&#34;2009-10-09&#34;,&#34;2009-01-12&#34;,&#34;2012-10-13&#34;,&#34;2011-06-07&#34;,&#34;2012-12-02&#34;,&#34;2011-05-03&#34;,&#34;2011-12-12&#34;,&#34;2011-12-06&#34;,&#34;2012-03-29&#34;,&#34;2008-10-16&#34;,&#34;2009-09-15&#34;,&#34;2012-09-26&#34;,&#34;2011-01-25&#34;,&#34;2010-09-20&#34;,&#34;2009-07-07&#34;,&#34;2010-03-11&#34;,&#34;2011-07-25&#34;,&#34;2008-10-26&#34;,&#34;2010-12-22&#34;,&#34;2009-04-10&#34;,&#34;2012-12-18&#34;,&#34;2011-03-21&#34;,&#34;2012-08-06&#34;,&#34;2010-02-12&#34;,&#34;2008-12-16&#34;,&#34;2008-09-26&#34;,&#34;2008-12-19&#34;,&#34;2011-09-03&#34;,&#34;2013-02-01&#34;,&#34;2010-11-14&#34;,&#34;2010-07-14&#34;,&#34;2009-02-27&#34;,&#34;2011-03-09&#34;,&#34;2011-06-27&#34;,&#34;2012-11-27&#34;,&#34;2011-06-02&#34;,&#34;2011-02-03&#34;,&#34;2010-06-09&#34;,&#34;2011-05-07&#34;,&#34;2013-03-03&#34;,&#34;2010-10-14&#34;,&#34;2009-08-19&#34;,&#34;2012-04-09&#34;,&#34;2008-11-13&#34;,&#34;2011-08-14&#34;,&#34;2008-12-13&#34;,&#34;2009-10-22&#34;,&#34;2010-03-17&#34;,&#34;2013-08-11&#34;,&#34;2011-04-25&#34;,&#34;2008-12-11&#34;,&#34;2009-12-09&#34;,&#34;2009-02-14&#34;,&#34;2009-06-25&#34;,&#34;2010-01-04&#34;,&#34;2012-06-01&#34;],[&#34;$162,700&#34;,&#34;$1,200,000&#34;,&#34;$86,000&#34;,&#34;$132,000&#34;,&#34;$206,850&#34;,&#34;$372,000&#34;,&#34;$163,500&#34;,&#34;$106,450&#34;,&#34;$145,600&#34;,&#34;$433,060&#34;,&#34;$470,600&#34;,&#34;$205,500&#34;,&#34;$217,500&#34;,&#34;$112,000&#34;,&#34;$85,600&#34;,&#34;$87,500&#34;,&#34;$850,000&#34;,&#34;$170,750&#34;,&#34;$235,500&#34;,&#34;$92,575&#34;,&#34;$237,500&#34;,&#34;$313,500&#34;,&#34;$356,250&#34;,&#34;$137,500&#34;,&#34;$109,850&#34;,&#34;$164,500&#34;,&#34;$645,750&#34;,&#34;$90,560&#34;,&#34;$345,000&#34;,&#34;$75,650&#34;,&#34;$357,650&#34;,&#34;$86,500&#34;,&#34;$103,500&#34;,&#34;$324,050&#34;,&#34;$183,000&#34;,&#34;$198,500&#34;,&#34;$95,400&#34;,&#34;$234,500&#34;,&#34;$725,000&#34;,&#34;$145,000&#34;,&#34;$342,000&#34;,&#34;$327,900&#34;,&#34;$139,575&#34;,&#34;$138,575&#34;,&#34;$183,000&#34;,&#34;$163,000&#34;,&#34;$103,600&#34;,&#34;$114,500&#34;,&#34;$385,750&#34;,&#34;$98,540&#34;,&#34;$320,800&#34;,&#34;$136,200&#34;,&#34;$85,675&#34;,&#34;$452,500&#34;,&#34;$675,000&#34;,&#34;$125,250&#34;,&#34;$115,000&#34;],[532,9366,570,606,5344,1321,9055,3730,5836,2996,4087,8089,3856,2133,1434,248,331,2541,452,7001,6974,9044,2019,7499,9406,9791,3274,7955,7976,9069,6609,5413,9016,7979,9040,1803,6642,9462,8341,6921,8349,5745,4648,2702,3390,4825,8074,7498,2535,2626,1853,3187,3761,354,3438,1939,820]],&#34;container&#34;:&#34;&lt;table class=\&#34;display\&#34;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt; &lt;\/th&gt;\n      &lt;th&gt; &lt;\/th&gt;\n      &lt;th&gt;Name&lt;\/th&gt;\n      &lt;th&gt;Position&lt;\/th&gt;\n      &lt;th&gt;Office&lt;\/th&gt;\n      &lt;th&gt;Age&lt;\/th&gt;\n      &lt;th&gt;Start date&lt;\/th&gt;\n      &lt;th&gt;Salary&lt;\/th&gt;\n      &lt;th&gt;Employee ID&lt;\/th&gt;\n    &lt;\/tr&gt;\n  &lt;\/thead&gt;\n&lt;\/table&gt;&#34;,&#34;options&#34;:{&#34;pageLength&#34;:5,&#34;columnDefs&#34;:[{&#34;visible&#34;:false,&#34;targets&#34;:[0,8,5,6]},{&#34;orderable&#34;:false,&#34;className&#34;:&#34;details-control&#34;,&#34;targets&#34;:1},{&#34;className&#34;:&#34;dt-left&#34;,&#34;targets&#34;:[1,2,3]},{&#34;className&#34;:&#34;dt-right&#34;,&#34;targets&#34;:[4,5,6,7,8]},{&#34;orderable&#34;:false,&#34;targets&#34;:0}],&#34;order&#34;:[],&#34;autoWidth&#34;:false,&#34;orderClasses&#34;:false,&#34;lengthMenu&#34;:[5,10,25,50,100]},&#34;callback&#34;:&#34;function(table) {\ntable.column(1).nodes().to$().css({cursor: &#39;pointer&#39;}); \n  var format = function(d) {\n    text = &#39;&lt;div&gt;&lt;table &gt;&#39; + \n    &#39;&lt;tr&gt;&#39; +\n  &#39;&lt;td&gt;&#39; + &#39;Employee ID:&#39; + &#39;&lt;\/td&gt;&#39; +\n  &#39;&lt;td&gt;&#39; + d[8] + &#39;&lt;\/td&gt;&#39; +\n&#39;&lt;\/tr&gt;&#39; +  &#39;&lt;tr&gt;&#39; +\n  &#39;&lt;td&gt;&#39; + &#39;Age:&#39; + &#39;&lt;\/td&gt;&#39; +\n  &#39;&lt;td&gt;&#39; + d[5] + &#39;&lt;\/td&gt;&#39; +\n&#39;&lt;\/tr&gt;&#39; +  &#39;&lt;tr&gt;&#39; +\n  &#39;&lt;td&gt;&#39; + &#39;Start date:&#39; + &#39;&lt;\/td&gt;&#39; +\n  &#39;&lt;td&gt;&#39; + d[6] + &#39;&lt;\/td&gt;&#39; +\n&#39;&lt;\/tr&gt;&#39; + &#39;&lt;\/table&gt;&lt;\/div&gt;&#39;\n      return text;}; \n   table.on(&#39;click&#39;, &#39;td.details-control&#39;, function() {\n    var td = $(this), row = table.row(td.closest(&#39;tr&#39;));\n    if (row.child.isShown()) {\n      row.child.hide();\n      td.html(&#39;&amp;oplus;&#39;);\n    } else {\n      row.child(format(row.data())).show();\n      td.html(&#39;&amp;ominus;&#39;);\n    }\n  });\n}&#34;},&#34;evals&#34;:[&#34;callback&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;When clicking on the + sign we can see additional information about any given row. I think that &lt;code&gt;datatable&lt;/code&gt; produced with &lt;code&gt;databale2()&lt;/code&gt; function looks quite similar to &lt;a href=&#34;https://datatables.net/examples/api/row_details.html&#34;&gt;original example&lt;/a&gt;. Also, the benefit of making a function out of it allows us to specify other options available for &lt;code&gt;DT::datatable()&lt;/code&gt; functions, which hopefully makes &lt;code&gt;datatable2()&lt;/code&gt; to fit better in my (or yours) workflow.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;datatable2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;FUNS&lt;/h1&gt;
&lt;p&gt;Code for &lt;code&gt;datatable2()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# datatable2 - datatable with child rows
datatable2 &amp;lt;- function(x, vars = NULL, opts = NULL, ...) {
  
  names_x &amp;lt;- names(x)
  if (is.null(vars)) stop(&amp;quot;&amp;#39;vars&amp;#39; must be specified!&amp;quot;)
  pos &amp;lt;- match(vars, names_x)
  if (any(map_chr(x[, pos], typeof) == &amp;quot;list&amp;quot;))
    stop(&amp;quot;list columns are not supported in datatable2()&amp;quot;)
  
  pos &amp;lt;- pos[pos &amp;lt;= ncol(x)] + 1
  rownames(x) &amp;lt;- NULL
  if (nrow(x) &amp;gt; 0) x &amp;lt;- cbind(&amp;#39; &amp;#39; = &amp;#39;&amp;amp;oplus;&amp;#39;, x)

  # options
  opts &amp;lt;- c(
    opts, 
    list(
      columnDefs = list(
        list(visible = FALSE, targets = c(0, pos)),
        list(orderable = FALSE, className = &amp;#39;details-control&amp;#39;, targets = 1),
        list(className = &amp;#39;dt-left&amp;#39;, targets = 1:3),
        list(className = &amp;#39;dt-right&amp;#39;, targets = 4:ncol(x))
      )
  ))
  
  datatable(
    x, 
    ...,
    escape = -2,
    options = opts,
    callback = JS(.callback2(x = x, pos = c(0, pos)))
  )
}

.callback2 &amp;lt;- function(x, pos = NULL) {
  
  part1 &amp;lt;- &amp;quot;table.column(1).nodes().to$().css({cursor: &amp;#39;pointer&amp;#39;});&amp;quot;
  
  part2 &amp;lt;- .child_row_table2(x, pos = pos)
  
  part3 &amp;lt;- 
  &amp;quot;
   table.on(&amp;#39;click&amp;#39;, &amp;#39;td.details-control&amp;#39;, function() {
    var td = $(this), row = table.row(td.closest(&amp;#39;tr&amp;#39;));
    if (row.child.isShown()) {
      row.child.hide();
      td.html(&amp;#39;&amp;amp;oplus;&amp;#39;);
    } else {
      row.child(format(row.data())).show();
      td.html(&amp;#39;&amp;amp;ominus;&amp;#39;);
    }
  });&amp;quot;
  
  paste(part1, part2, part3)
} 

.child_row_table2 &amp;lt;- function(x, pos = NULL) {
  
  names_x &amp;lt;- paste0(names(x), &amp;quot;:&amp;quot;)
  text &amp;lt;- &amp;quot;
  var format = function(d) {
    text = &amp;#39;&amp;lt;div&amp;gt;&amp;lt;table &amp;gt;&amp;#39; + 
  &amp;quot;

  for (i in seq_along(pos)) {
    text &amp;lt;- paste(text, glue::glue(
        &amp;quot;&amp;#39;&amp;lt;tr&amp;gt;&amp;#39; +
          &amp;#39;&amp;lt;td&amp;gt;&amp;#39; + &amp;#39;{names_x[pos[i]]}&amp;#39; + &amp;#39;&amp;lt;/td&amp;gt;&amp;#39; +
          &amp;#39;&amp;lt;td&amp;gt;&amp;#39; + d[{pos[i]}] + &amp;#39;&amp;lt;/td&amp;gt;&amp;#39; +
        &amp;#39;&amp;lt;/tr&amp;gt;&amp;#39; + &amp;quot; ))
  }

  paste0(text,
    &amp;quot;&amp;#39;&amp;lt;/table&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;
      return text;};&amp;quot;
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Use shortcodes to embed tweets, videos, etc. in your blogdown blog posts</title>
      <link>/2018/04/shortcodes/</link>
      <pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/shortcodes/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;Shortcodes are simple snippets inside your content files calling built-in or custom templates.&lt;/a&gt; This short post is a shout-out for the &lt;code&gt;blogdown::shortcode()&lt;/code&gt; function. Example(s) of &lt;code&gt;blogdown::shortcode()&lt;/code&gt; can be found in &lt;a href=&#34;https://bookdown.org/yihui/blogdown/content.html#shortcode&#34;&gt;blogdown book&lt;/a&gt;. To learn more about shortcodes visit &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34; class=&#34;uri&#34;&gt;https://gohugo.io/content-management/shortcodes/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Shortcodes make it super easy to embed content in blog posts. Lets say we have a video we want to embed in a post: &lt;a href=&#34;https://youtu.be/CjTLN-FXiFA&#34; class=&#34;uri&#34;&gt;https://youtu.be/CjTLN-FXiFA&lt;/a&gt;. By adding&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```{r, eval=TRUE}
blogdown::shortcode(&amp;quot;youtube&amp;quot;, &amp;quot;CjTLN-FXiFA&amp;quot;)
```&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to our &lt;code&gt;.Rmd&lt;/code&gt; file, we get: 
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/CjTLN-FXiFA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;
&lt;/p&gt;
&lt;div id=&#34;how-i-discovered-shortcodes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How I discovered shortcodes&lt;/h1&gt;
&lt;p&gt;For some time I have had the routine of (scrolling twitter and) sending tweets holding information I see myself using to my e-mail. For example, I find &lt;span class=&#34;citation&#34;&gt;@rensa_co&lt;/span&gt;’s example of &lt;code&gt;dplyr::case_when()&lt;/code&gt; and &lt;code&gt;geom_text()&lt;/code&gt; to be quite useful:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;💡 dplyr::case_when goes really well with geom_text (or ggrepel) for when you want to programmatically label a few of the most interesting features in your &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt; plots! And the criteria can be as complex as you want 🎉 &lt;a href=&#34;https://t.co/0jUp1uarde&#34;&gt;pic.twitter.com/0jUp1uarde&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Goldie (@rensa_co) &lt;a href=&#34;https://twitter.com/rensa_co/status/976340414016843776?ref_src=twsrc%5Etfw&#34;&gt;March 21, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;So I sent it to my (work or personal - I’m not sure which) e-mail with hopes to easily find it in the future. One can experience the pain of the e-mail system after first time really looking for something. One can quickly understand that there must exist a better way. As I was looking for a way to archive all these pearls, I was thinking about devoting a blog post to those tweets. I started by looking for a way to embed twitter cards to blog post written with &lt;code&gt;blogdown&lt;/code&gt;. I googeled “how to embed tweet in rmarkdown” which not surprisingly lead me to &lt;a href=&#34;https://stackoverflow.com/questions/46529953/how-to-include-arbitrary-html-in-rmarkdown-document&#34;&gt;stackoverflow&lt;/a&gt;. This question was answered by &lt;a href=&#34;https://yihui.name/&#34;&gt;Yihui&lt;/a&gt; and pointed to the &lt;a href=&#34;https://bookdown.org/yihui/blogdown/content.html&#34;&gt;blogdown documentation&lt;/a&gt; where I learned about &lt;code&gt;shortcode()&lt;/code&gt; function.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fin&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;FIN&lt;/h1&gt;
&lt;p&gt;After giving the blog post approach a second thought I realized that this is probably not gonna work. It seemed to be too much hassle to update the post manually or figure out how to automate the process. I ended up creating a &lt;em&gt;#rhtwotes&lt;/em&gt; (rh - my initials; twote&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; - twitter note/quote) and the plan is to retweet things I see myself using with &lt;em&gt;#rhtwotes&lt;/em&gt; hashtag. This gives me easy access to my &lt;em&gt;twotes&lt;/em&gt; whenever I have internet connections and also simplifies (retweeting is easier than sending an e-mail) note taking part.&lt;/p&gt;
&lt;p&gt;For now, using the hashtag system feels quite natural and optimal way to cover my use case. I also ask myself: “How could I use something not as simple as retweeting system before?”. As it often happens, &lt;em&gt;obvious&lt;/em&gt; solutions for our problems become &lt;em&gt;obvious&lt;/em&gt; only after we have tried many not so &lt;em&gt;obvious&lt;/em&gt; ones.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/hashtag/rhtwote&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;#rhtwotes&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- One extra thing I learned writing this post is how to add verbatim code chunks to posts written in rmarkown. Learn more from Yihui&#39;s  [blog](https://yihui.name/en/2017/11/knitr-verbatim-code-chunk/). --&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;I first had &lt;em&gt;tnotes&lt;/em&gt; for twitter notes in mind. Fortunately ML proposed &lt;em&gt;twote&lt;/em&gt; which has much better sounding. Word &lt;em&gt;twote&lt;/em&gt; seems to have wider usage as well: &lt;a href=&#34;https://www.urbandictionary.com/define.php?term=Twote&#34; class=&#34;uri&#34;&gt;https://www.urbandictionary.com/define.php?term=Twote&lt;/a&gt;&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>goodreads: what books #estoniareads?</title>
      <link>/2018/02/goodreads-what-books-estoniareads/</link>
      <pubDate>Sun, 04 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/goodreads-what-books-estoniareads/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://news.err.ee/&#34;&gt;Estonian National Broadcasting Agency&lt;/a&gt; run a wonderful campaign called “Eesti loeb” (Estonia reads), where people were asked to post a picture of themselves with a book they are reading (or have read) and find inspiring. Photos of &lt;a href=&#34;https://kultuur.err.ee/677126/fotod-lugejad-koos-oma-lemmikraamatutega&#34;&gt;readers with their favourite books&lt;/a&gt; were published afterwards.&lt;/p&gt;
&lt;p&gt;But which books are the most popular ones among Estonians? We are going to answer this question (inspired by the campaign) by analyzing books read by people in &lt;a href=&#34;https://www.goodreads.com/group/show/45927-eesti-estonia&#34;&gt;Eesti Estonia&lt;/a&gt; group in goodreads. &lt;a href=&#34;https://en.wikipedia.org/wiki/R_(programming_language)&#34;&gt;R&lt;/a&gt; will be used to get and analyze data.&lt;/p&gt;
&lt;p&gt;If you are not interested in R stuff, then feel free to jump to &lt;a href=&#34;#results&#34;&gt;results&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;api&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;API&lt;/h1&gt;
&lt;p&gt;First we need to get data about books read by members of &lt;a href=&#34;https://www.goodreads.com/group/show/45927-eesti-estonia&#34;&gt;Eesti Estonia&lt;/a&gt;. We are going to use &lt;a href=&#34;https://www.goodreads.com/api&#34;&gt;goodreads API&lt;/a&gt; to access the data in the website. To get an access to goodreads API one should register for a &lt;a href=&#34;https://www.goodreads.com/api/keys&#34;&gt;developer key&lt;/a&gt;. After getting goodreads API key I took advice (I chose the one that sounded most reasonable for my purposes) from &lt;a href=&#34;http://blog.revolutionanalytics.com/2015/11/how-to-store-and-use-authentication-details-with-r.html&#34;&gt;Andrie de Vries blog post&lt;/a&gt; and saved my API key to &lt;code&gt;.Renviron&lt;/code&gt; file. I also found &lt;a href=&#34;https://csgillespie.github.io/efficientR/r-startup.html&#34;&gt;“R startup” chapter in “Efficient R programming”&lt;/a&gt; to be helpful when learning about &lt;code&gt;.Renviron&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;note: as this is my first time working with API’s, any comments on how to improve the code or methods I share are more than welcomed.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After saving goodreads API key to &lt;code&gt;.Renviron&lt;/code&gt; one can access it by:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;api_key &amp;lt;- Sys.getenv(&amp;quot;GOODREADS_API_KEY&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Getting data&lt;/h1&gt;
&lt;p&gt;Our plan is to get user ID-s of the members of &lt;a href=&#34;https://www.goodreads.com/group/show/45927-eesti-estonia&#34;&gt;Eesti Estonia&lt;/a&gt; goodreads group. Using these ID-s we can get the books users have in their &lt;code&gt;read&lt;/code&gt; shelves. Having this data we can easily find out which books are read by how many group members. We use functions &lt;code&gt;get_group()&lt;/code&gt; and &lt;code&gt;get_shelf()&lt;/code&gt; to get the raw data. For getting beautiful &lt;code&gt;tibbles&lt;/code&gt; out of raw data we use functions&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; &lt;code&gt;group_to_df()&lt;/code&gt; and &lt;code&gt;shelf_to_df()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(httr)
library(xml2)
library(rvest)
library(stringr)

get_group &amp;lt;- function(group_id = 45927, gr_api_key, page = 1) {

  # functions for getting goodreads group info
  url &amp;lt;- paste0(&amp;quot;https://www.goodreads.com/group/members/&amp;quot;, group_id, &amp;quot;.xml&amp;quot;)
  members &amp;lt;- httr::GET(
    url = url, 
    query = list(sort = &amp;quot;last_online&amp;quot;, key = gr_api_key, page = page)
  )
  members &amp;lt;- httr::content(members, as = &amp;quot;parsed&amp;quot;)
  members
}

get_shelf &amp;lt;- function(gr_id, gr_api_key, n = 200, page = 1, 
                      shelf = c(&amp;quot;read&amp;quot;, &amp;quot;currently-reading&amp;quot;, &amp;quot;to-read&amp;quot;)) {
  # functions for getting shelf content
  url &amp;lt;- &amp;quot;https://www.goodreads.com/review/list?&amp;quot;
  shelf &amp;lt;- shelf[1]
  shelf &amp;lt;- GET(
    url = url, 
    query = list(v = 2, key = gr_api_key, id = gr_id, 
                 shelf = shelf, per_page = n, page = page)
  )
  shelf_contents &amp;lt;- content(shelf, as = &amp;quot;parsed&amp;quot;)
  return(shelf_contents)
}

group_to_df &amp;lt;- function(group) {
  
  member_id &amp;lt;- group %&amp;gt;% 
    xml_find_all(&amp;quot;//user&amp;quot;) %&amp;gt;% 
    as_list() %&amp;gt;% 
    map_chr(~ .$id[[1]])
  
  df &amp;lt;- tibble(member_id)
  df
}

shelf_to_df &amp;lt;- function(shelf) {
  # function for getting data frame from xml input 
  shelf_as_list &amp;lt;- xml2::as_list(shelf)[[&amp;quot;reviews&amp;quot;]]
  title   &amp;lt;- shelf %&amp;gt;% xml_find_all(&amp;quot;//title&amp;quot;) %&amp;gt;% xml_text()
  book_id &amp;lt;- map_chr(shelf_as_list, ~ .$book$id[[1]])
  df &amp;lt;- tibble(title, book_id)
  df
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can look up “Eesti Estonia” group ID from its &lt;a href=&#34;https://www.goodreads.com/group/show/45927-eesti-estonia&#34;&gt;URL&lt;/a&gt;, which is &lt;code&gt;45927&lt;/code&gt;. In the time of writing this post there was 23 pages of members in the group, totalling little less than 690 members.&lt;/p&gt;
&lt;p&gt;Now we can get all group members ID’s and use these ID’s to programmatically find and download users shelves. We use &lt;code&gt;purrr::map_df&lt;/code&gt; for getting and storing members ID’s and shelves. Since not all members allow accessing their data and some members have not listed any books in their &lt;code&gt;read&lt;/code&gt; shelves, we use &lt;code&gt;tryCatch()&lt;/code&gt; to avoid our loop breaking down. We save shelves one by one to get the number of members who have read at least 1 book. We use this number as an effective group size, which comes handy when evaluating percentage of members who have read a certain book.&lt;a href=&#34;#fn2&#34; class=&#34;footnoteRef&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Also, notice that the code below downloads first 1000 books (we download first 5 pages, each max 200 entries) users have in their &lt;code&gt;read&lt;/code&gt; shelves.&lt;a href=&#34;#fn3&#34; class=&#34;footnoteRef&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;members &amp;lt;- map_df(1:23, function(p) {
  get_group(group_id = 45927, gr_api_key = api_key, page = p) %&amp;gt;% 
    group_to_df()
})

# this will take a while :)
shelves &amp;lt;- map_df(members$member_id, function(id) {
  
  shelf &amp;lt;- map_df(1:5, function(page) {
    x &amp;lt;- get_shelf(gr_id = id, gr_api_key = api_key,
                   shelf = &amp;quot;read&amp;quot;, n = 200, page = page)
    tryCatch({
      shelf_to_df(shelf = x)
    }, error = function(cond) data_frame())
  }) 
  
  saveRDS(shelf, paste0(&amp;quot;shelves/read-&amp;quot;, id, &amp;quot;.rds&amp;quot;))
  shelf
  
})

n_not_zero &amp;lt;- map(dir(&amp;quot;/shelves&amp;quot;, full.names = T), readRDS) %&amp;gt;% 
  map_lgl(function(x) nrow(x) &amp;gt; 0) %&amp;gt;% sum()

saveRDS(members, &amp;quot;members.rds&amp;quot;)
saveRDS(shelves, &amp;quot;shelves.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;results&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Results&lt;/h1&gt;
&lt;p&gt;Having this data we can easily find out which are the most popular books among the group members:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- shelves %&amp;gt;%
  count(title) %&amp;gt;%
  arrange(-n) %&amp;gt;%
  slice(1:15) %&amp;gt;%
  mutate(title = ifelse(str_detect(title, &amp;quot;arry&amp;quot;), str_sub(title, -17, -2), title)) %&amp;gt;%
  arrange(-n, title) %&amp;gt;%
  mutate(title = forcats::fct_reorder(title, n))

# est variable is added by manually exploring data
df %&amp;gt;%
  bind_cols(est = c(1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0)) %&amp;gt;%
  mutate(`cntry` = ifelse(est == 1, &amp;quot;Estonian&amp;quot;, &amp;quot;other&amp;quot;)) %&amp;gt;%
  ggplot(aes(title, n / n_not_zero)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;, aes(fill = cntry)) +
  coord_flip() +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_manual(values = c(&amp;quot;#0072CE&amp;quot;, &amp;quot;#000000&amp;quot;),
                    name = &amp;quot;Book author \nnationality&amp;quot;) +
  labs(x = &amp;quot;&amp;quot;, y = &amp;quot;% of users in goodreads &amp;#39;Eesti Estonia&amp;#39; \ngroup who have read the book&amp;quot;) +
  geom_text(data = df %&amp;gt;% slice(1) %&amp;gt;% mutate(text = paste(n, &amp;quot;out of&amp;quot;, n_not_zero)),
            aes(title, n / n_not_zero - .055, label = text), color = &amp;quot;white&amp;quot;, size = 3) +
  hrbrthemes::theme_ipsum() +
  theme(axis.text =  element_text(size = 11),
        axis.title.x = element_text(size = 11),
        legend.text = element_text(size = 11))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-02-04-goodreads-what-books-estoniareads_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Andurs Kivirähk’s &lt;a href=&#34;https://www.goodreads.com/book/show/6347735&#34;&gt;Rehepapp ehk november&lt;/a&gt; takes the first place. Almost 40% of group members have it in their &lt;code&gt;read&lt;/code&gt; shelf. &lt;a href=&#34;http://www.imdb.com/title/tt6164502/&#34;&gt;Movie version&lt;/a&gt; of “Rehepapp ehk november” aired in 2017, which gives anyone interested a second medium to discover this popular story.&lt;/p&gt;
&lt;p&gt;On the fourth place we see one of the Estonian classics - A.H Tammsaare’s &lt;a href=&#34;https://www.goodreads.com/book/show/7704481&#34;&gt;Tõde ja õigus I&lt;/a&gt;. My initial guess was that books by Estonian authors are dominating the list.&lt;a href=&#34;#fn4&#34; class=&#34;footnoteRef&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; Nevertheless, I am happy to see 4 books of Estonian author in TOP15. The popularity of Harry Potter series came to me as a little surprise. I think it was surprising for me because I am biased - I have not read any of them myself. When scrolling through “Eesti loeb” campaign photos of &lt;a href=&#34;https://kultuur.err.ee/677126/fotod-lugejad-koos-oma-lemmikraamatutega&#34;&gt;readers with their favourite books&lt;/a&gt; we see both authors, A.H Tammsaare and J.K Rowling, mentioned more than once.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Half the credit for functions seen below goes to Max Humber’s &lt;a href=&#34;http://maxhumber.com/goodreads-API-r&#34;&gt;blog post&lt;/a&gt; about how to use goodreads API in R.&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Real percentages may obviously differ, but for our purposes I find it good enough approximation. If your &lt;code&gt;read&lt;/code&gt; shelf is empty, then you are probably not active in goodreads.&lt;a href=&#34;#fnref2&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;There are 8 members having more than 1000 books in their &lt;code&gt;read&lt;/code&gt; shelf, which means our book stats can be off by 8.&lt;a href=&#34;#fnref3&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;When considering Harry Potter series as one book, the Estonian/other ratio in TOP15 will remain same.&lt;a href=&#34;#fnref4&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>